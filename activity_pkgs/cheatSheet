Node:
remap -
ros2 run {pkg_name} {Node} --ros-args -r __node:={newName}

Topic:
remap -
ros2 interface show {topic name}
ros2 run {pkg_name} {Node} --ros-args -r {topicname}:={newName}

to build custom msg/service add following:

pkg.xml
<!-- adding to include custom service/message  -->
<build_depend>rosidl_default_generators</build_depend>
<exec_depend>rosidl_default_runtime</exec_depend>
<member_of_group>rosidl_interface_packages</member_of_group>
<!-- till here -->

cmake
find_package(activity_pkgs REQUIRED)
rosidl_generate_interfaces({PROJECT_NAME} srv/serviceName)

ament_export_dependencies(rosidl_default_runtime) - before ament_package()

services:
ros2 service list
ros2 service type {service name}
ros2 interface show {service type}
ros2 service call {service name} {service type} "{}"
remap -
ros2 run {pkg_name} {serviceNode} --ros-args -r {serviceName}:={newName}

msg:
ros2 interface package {package_name} - to see all msg and services available
you can create a custom msg type and then create another msg that has array for the new custom msg type

parameters:
need to declare before using *declare_param({name})*- else won't show error when running the node but param wont appear in the list
ros2 param list
ros2 param get {node name} {param name} - gives current value of param
ros2 run {pkg_name} {node_name} --ros-args -p {parameterName}:={param Value}

launch file:
py file - 
start function has to be *generate_launch_description*
add <exec_depend>{package_name} to pkg.xml to include the package that has target node or interfaces
add following to the cmakelist to build launch file
install(DIRECTORY 
  launch
  DESTINATION share/{PROJECT_NAME}
)

In Node, add package and executable names
to rename a node. add name="{new_name}"
to remap a topic add remapping = [(tuples of topic name and new name)]




whats the use of: 
symlink install -- create a symbolic link so you dont have to build the package again
sharedptr
std::bind
